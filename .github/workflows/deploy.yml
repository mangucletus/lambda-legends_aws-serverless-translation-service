# .github/workflows/deploy.yml
# FIXED: Handles NPM dependency conflicts properly

name: Deploy AWS Translate Application

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: aws-translate-app
  ENVIRONMENT: dev

jobs:
  # Deploy infrastructure
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init

    - name: Terraform Plan
      run: |
        cd infrastructure
        terraform plan \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="environment=${{ env.ENVIRONMENT }}"

    - name: Terraform Apply
      run: |
        cd infrastructure
        terraform apply -auto-approve \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="environment=${{ env.ENVIRONMENT }}"

    - name: Get Terraform Outputs
      id: tf-outputs
      run: |
        cd infrastructure
        echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
        echo "cognito_user_pool_id=$(terraform output -raw cognito_user_pool_id)" >> $GITHUB_OUTPUT
        echo "cognito_user_pool_client_id=$(terraform output -raw cognito_user_pool_client_id)" >> $GITHUB_OUTPUT
        echo "cognito_identity_pool_id=$(terraform output -raw cognito_identity_pool_id)" >> $GITHUB_OUTPUT
        echo "request_bucket_name=$(terraform output -raw request_bucket_name)" >> $GITHUB_OUTPUT
        echo "response_bucket_name=$(terraform output -raw response_bucket_name)" >> $GITHUB_OUTPUT
        echo "frontend_bucket_name=$(terraform output -raw frontend_bucket_name)" >> $GITHUB_OUTPUT
        echo "frontend_url=$(terraform output -raw frontend_url)" >> $GITHUB_OUTPUT

    - name: Save outputs for frontend
      run: |
        mkdir -p outputs
        cat > outputs/config.json << EOF
        {
          "api_gateway_url": "${{ steps.tf-outputs.outputs.api_gateway_url }}",
          "cognito_user_pool_id": "${{ steps.tf-outputs.outputs.cognito_user_pool_id }}",
          "cognito_user_pool_client_id": "${{ steps.tf-outputs.outputs.cognito_user_pool_client_id }}",
          "cognito_identity_pool_id": "${{ steps.tf-outputs.outputs.cognito_identity_pool_id }}",
          "request_bucket_name": "${{ steps.tf-outputs.outputs.request_bucket_name }}",
          "response_bucket_name": "${{ steps.tf-outputs.outputs.response_bucket_name }}",
          "frontend_bucket_name": "${{ steps.tf-outputs.outputs.frontend_bucket_name }}"
        }
        EOF

    - name: Upload outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs
        path: outputs/

  # Build and deploy frontend
  deploy-frontend:
    name: Deploy Frontend
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        # Remove cache dependency on package-lock.json since we'll regenerate it
        cache: 'npm'
        cache-dependency-path: frontend/package.json

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download Terraform outputs
      uses: actions/download-artifact@v4
      with:
        name: terraform-outputs
        path: outputs/

    - name: Create environment file
      run: |
        cd frontend
        
        # Read config from Terraform outputs
        CONFIG_FILE="../outputs/config.json"
        
        API_GATEWAY_URL=$(cat $CONFIG_FILE | jq -r '.api_gateway_url')
        USER_POOL_ID=$(cat $CONFIG_FILE | jq -r '.cognito_user_pool_id')
        USER_POOL_CLIENT_ID=$(cat $CONFIG_FILE | jq -r '.cognito_user_pool_client_id')
        IDENTITY_POOL_ID=$(cat $CONFIG_FILE | jq -r '.cognito_identity_pool_id')
        REQUEST_BUCKET=$(cat $CONFIG_FILE | jq -r '.request_bucket_name')
        RESPONSE_BUCKET=$(cat $CONFIG_FILE | jq -r '.response_bucket_name')
        
        # Create environment file
        cat > .env.production << EOF
        REACT_APP_AWS_REGION=${{ env.AWS_REGION }}
        REACT_APP_USER_POOL_ID=${USER_POOL_ID}
        REACT_APP_USER_POOL_CLIENT_ID=${USER_POOL_CLIENT_ID}
        REACT_APP_IDENTITY_POOL_ID=${IDENTITY_POOL_ID}
        REACT_APP_API_GATEWAY_URL=${API_GATEWAY_URL}
        REACT_APP_REQUEST_BUCKET=${REQUEST_BUCKET}
        REACT_APP_RESPONSE_BUCKET=${RESPONSE_BUCKET}
        EOF
        
        echo "‚úÖ Environment file created successfully"

    - name: Fix NPM Dependencies
      run: |
        cd frontend
        echo "üîß Checking for NPM dependency conflicts..."
        
        # Check if package-lock.json exists and if npm ci would work
        if [ -f "package-lock.json" ]; then
          echo "üìã Found package-lock.json, testing compatibility..."
          if ! npm ci --dry-run > /dev/null 2>&1; then
            echo "‚ö†Ô∏è Package lock file conflicts detected, regenerating..."
            rm -f package-lock.json
            echo "üóëÔ∏è Removed conflicting package-lock.json"
          else
            echo "‚úÖ Package lock file is compatible"
          fi
        else
          echo "üìã No package-lock.json found"
        fi

    - name: Install dependencies
      run: |
        cd frontend
        echo "üì¶ Installing dependencies..."
        
        # Show current directory and files
        echo "üìÅ Current directory: $(pwd)"
        echo "üìã Package.json exists: $([ -f package.json ] && echo 'YES' || echo 'NO')"
        
        # Clean npm cache and remove any existing node_modules
        npm cache clean --force
        rm -rf node_modules package-lock.json
        
        # Install dependencies fresh
        echo "üîÑ Installing fresh dependencies..."
        npm install --verbose
        
        # Verify react-scripts was installed
        if [ -f "node_modules/.bin/react-scripts" ]; then
          echo "‚úÖ react-scripts installed successfully"
        else
          echo "‚ùå react-scripts not found, attempting to install explicitly..."
          npm install react-scripts@5.0.1 --save-dev
        fi
        
        echo "‚úÖ Dependencies installation completed"

    - name: Verify installation
      run: |
        cd frontend
        echo "üîç Verifying installation..."
        
        # Check if key dependencies are installed
        echo "üìã Checking critical dependencies..."
        npm list react react-dom aws-amplify @aws-amplify/ui-react react-scripts --depth=0 || echo "‚ö†Ô∏è Some dependencies may be missing"
        
        # Check if react-scripts exists and is executable
        if [ -f "node_modules/.bin/react-scripts" ]; then
          echo "‚úÖ react-scripts binary found"
          ls -la node_modules/.bin/react-scripts
        else
          echo "‚ùå react-scripts binary not found"
          echo "üìÇ Contents of node_modules/.bin/:"
          ls -la node_modules/.bin/ | head -10 || echo "node_modules/.bin/ does not exist"
          exit 1
        fi
        
        # Test that react-scripts can be called
        echo "üß™ Testing react-scripts..."
        npx react-scripts --version || npm run build --dry-run || echo "‚ö†Ô∏è Could not test react-scripts"

    - name: Build React app
      run: |
        cd frontend
        echo "üî® Building React application..."
        
        # Show environment info
        echo "üìä Environment info:"
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Current directory: $(pwd)"
        
        # Set build environment variables
        export CI=false
        export GENERATE_SOURCEMAP=false
        export NODE_OPTIONS="--max-old-space-size=4096"
        
        # Verify react-scripts one more time before building
        if [ -f "node_modules/.bin/react-scripts" ]; then
          echo "‚úÖ react-scripts found, proceeding with build"
        else
          echo "‚ùå react-scripts still not found, listing node_modules contents..."
          ls -la node_modules/ | head -20
          exit 1
        fi
        
        # Build using npx to ensure we find react-scripts
        echo "üî® Starting build process..."
        npx react-scripts build
        
        # Verify build output
        if [ -f "build/index.html" ]; then
          echo "‚úÖ Build completed successfully"
          echo "üìä Build size: $(du -sh build/ | cut -f1)"
          echo "üìÇ Build contents:"
          ls -la build/
        else
          echo "‚ùå Build failed - index.html not found"
          echo "üìÇ Build directory contents:"
          ls -la build/ 2>/dev/null || echo "Build directory does not exist"
          exit 1
        fi

    - name: Deploy to S3
      run: |
        cd frontend
        FRONTEND_BUCKET=$(cat ../outputs/config.json | jq -r '.frontend_bucket_name')
        echo "‚òÅÔ∏è Deploying to S3 bucket: ${FRONTEND_BUCKET}"
        
        # Sync files to S3
        aws s3 sync build/ s3://${FRONTEND_BUCKET} --delete
        
        echo "‚úÖ Frontend deployed to S3"

    - name: Invalidate CloudFront
      run: |
        echo "üîÑ Invalidating CloudFront cache..."
        
        # Try to find CloudFront distribution by comment
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Comment=='CloudFront distribution for ${{ env.PROJECT_NAME }} frontend'].Id" --output text)
        
        if [ ! -z "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
          echo "üîÑ Found CloudFront distribution: $DISTRIBUTION_ID"
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
          echo "‚úÖ CloudFront cache invalidated"
        else
          echo "‚ö†Ô∏è CloudFront distribution not found by comment, trying Terraform output..."
          # Fallback: try to get distribution ID from Terraform outputs
          cd infrastructure
          DIST_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
          if [ ! -z "$DIST_ID" ]; then
            aws cloudfront create-invalidation --distribution-id $DIST_ID --paths "/*"
            echo "‚úÖ CloudFront cache invalidated using Terraform output"
          else
            echo "‚ö†Ô∏è Could not find CloudFront distribution ID"
          fi
        fi

    - name: Deployment complete
      run: |
        echo "üéâ Deployment completed successfully!"
        echo ""
        
        FRONTEND_URL=$(cat outputs/config.json | jq -r '.frontend_url' 2>/dev/null || echo "Check AWS Console")
        API_URL=$(cat outputs/config.json | jq -r '.api_gateway_url' 2>/dev/null || echo "Check AWS Console")
        
        echo "üì± Frontend URL: $FRONTEND_URL"
        echo "üîó API Gateway URL: $API_URL"
        echo ""
        echo "üöÄ Your AWS Translate application is now live!"
        echo "‚ú® Features available:"
        echo "   - Email/password authentication (Cognito)"
        echo "   - Text translation with prominent results display"
        echo "   - File upload for batch translation"
        echo "   - Copy functionality for translated text"
        echo "   - 21 supported languages"